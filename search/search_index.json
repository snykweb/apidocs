{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SnykWeb API Documentation For full documentation visit https://snykweb.github.io . Commands from SnykWeb CLI snykweb new [dir-name] - Create a new project. snykweb serve - Start the live-reloading docs server. snykweb build - Build the documentation site. snykweb -h - Print help message and exit.","title":"Home"},{"location":"#snykweb-api-documentation","text":"For full documentation visit https://snykweb.github.io .","title":"SnykWeb API Documentation"},{"location":"#commands-from-snykweb-cli","text":"snykweb new [dir-name] - Create a new project. snykweb serve - Start the live-reloading docs server. snykweb build - Build the documentation site. snykweb -h - Print help message and exit.","title":"Commands from SnykWeb CLI"},{"location":"about/","text":"SnykWeb Introduction SnykWeb is collection of tools and libraries that simplifies the process of building web applications. It provides a structure and guidelines for developers to follow, which makes the development process faster and more efficient. In this document, we will discuss the features and benefits of our new web framework. Features Modular architecture: Our web framework is designed to be modular, which means that it can be customized according to the specific needs of a project. Developers can choose the modules they need and leave out the ones they don't. Easy to use: Our web framework is user-friendly and easy to learn. It has a clear and concise API, and the documentation is well-organized and easy to follow. High-performance: Our web framework is optimized for high performance. It is designed to handle high traffic and is scalable, which means that it can grow with your business. Security: Our web framework comes with built-in security features to protect against common web attacks such as XSS and CSRF. It also provides support for secure authentication and authorization. Database support: Our web framework supports multiple databases, including MySQL, PostgreSQL, and MongoDB. Benefits Faster development: With our web framework, developers can build web applications faster and more efficiently. The modular architecture and easy-to-use API make it easy to get started and build complex applications quickly. Scalability: Our web framework is designed to be scalable, which means that it can grow with your business. It can handle high traffic and is optimized for performance. Security: Our web framework comes with built-in security features to protect against common web attacks. This makes it easier for developers to build secure applications without having to worry about security issues. (Note: still in development) Flexibility: Our web framework is modular, which means that it can be customized to meet the specific needs of a project. This makes it a flexible option for developers who want to build unique web applications. Community support: Our web framework has a growing community of developers who are actively contributing to its development. This means that developers can get help and support from other developers who are using the same framework. Core Developers: Asaf Hair, Jack Della Libera, Alessio Hutton, Calum Sanoop, Sam Biton","title":"About"},{"location":"about/#snykweb-introduction","text":"SnykWeb is collection of tools and libraries that simplifies the process of building web applications. It provides a structure and guidelines for developers to follow, which makes the development process faster and more efficient. In this document, we will discuss the features and benefits of our new web framework.","title":"SnykWeb Introduction"},{"location":"about/#features","text":"Modular architecture: Our web framework is designed to be modular, which means that it can be customized according to the specific needs of a project. Developers can choose the modules they need and leave out the ones they don't. Easy to use: Our web framework is user-friendly and easy to learn. It has a clear and concise API, and the documentation is well-organized and easy to follow. High-performance: Our web framework is optimized for high performance. It is designed to handle high traffic and is scalable, which means that it can grow with your business. Security: Our web framework comes with built-in security features to protect against common web attacks such as XSS and CSRF. It also provides support for secure authentication and authorization. Database support: Our web framework supports multiple databases, including MySQL, PostgreSQL, and MongoDB.","title":"Features"},{"location":"about/#benefits","text":"Faster development: With our web framework, developers can build web applications faster and more efficiently. The modular architecture and easy-to-use API make it easy to get started and build complex applications quickly. Scalability: Our web framework is designed to be scalable, which means that it can grow with your business. It can handle high traffic and is optimized for performance. Security: Our web framework comes with built-in security features to protect against common web attacks. This makes it easier for developers to build secure applications without having to worry about security issues. (Note: still in development) Flexibility: Our web framework is modular, which means that it can be customized to meet the specific needs of a project. This makes it a flexible option for developers who want to build unique web applications. Community support: Our web framework has a growing community of developers who are actively contributing to its development. This means that developers can get help and support from other developers who are using the same framework. Core Developers: Asaf Hair, Jack Della Libera, Alessio Hutton, Calum Sanoop, Sam Biton","title":"Benefits"},{"location":"apidocs/","text":"HTTP Request Handling get_request_args(paramname:str) -> string Returns the parameter provided from a GET request. post_request_args(paramname:str) -> string Returns the parameter provided from a POST request. request_get_query_string() -> str Returns the full query string of the current request. get_request_headers() -> dict Returns a dictionary containing all the request headers. get_request_post_data() -> dict Returns a dictionary containing all the POST data. get_request_file_upload(file_input_name:str) -> file Returns the file uploaded by the user for the specified file input name. getuseragent() -> string Gets the useragent string from an HTTP request get(url:str, params:dict=None, headers:dict=None) -> dict Sends an HTTP GET request to the specified URL with the specified query parameters and headers, and returns the response as a dictionary. post(url:str, data:dict=None, headers:dict=None) -> dict Sends an HTTP POST request to the specified URL with the specified data and headers, and returns the response as a dictionary. Database Access connect_to_database() -> db_connection Returns a connection object to the configured database. execute_sql_query(query:str) -> query_result Executes the given SQL query and returns the result. execute_stored_procedure(proc_name:str, params:dict) -> proc_result Executes the specified stored procedure with the given parameters and returns the result. execute_safesql_query(query:str,parameter) -> query_result Executes the given SQL query and returns the result. Does automatic escaping File Access read_file(file_path:str) -> str Reads the contents of the specified file and returns it as a string. write_file(content:str, filepath:str) -> None Writes the given content to the specified file. delete_file(file_path:str) -> None Deletes the specified file. Common Functions redirect(url:str) -> None Redirects the user to the specified URL. set_cookie(cookie_name:str, cookie_value:str) -> None Sets a cookie with the given name and value. get_cookie(cookie_name:str) -> str Returns the value of the cookie with the given name. clear_cookie(cookie_name:str) -> None Clears the cookie with the given name. log(message:str) -> None Logs the given message to the server log. send_email(to:str, subject:str, message:str) -> None Sends an email to the specified recipient with the given subject and message. User Authentication login(username:str, password:str) -> bool Authenticates the user with the given username and password and returns a boolean indicating whether the authentication was successful. logout() -> None Logs out the current user. get_user_info() -> dict Returns a dictionary containing information about the currently logged in user. Form Handling validate_form(form_data:dict, validation_rules:dict) -> dict Validates the given form data against the specified validation rules and returns a dictionary containing any validation errors. render_form(template:str, form_data:dict) -> str Renders the specified template with the given form data and returns the resulting HTML. submit_form(form_data:dict) -> None Submits the given form data to the server. Response Handling render_template(template:str, context:dict) -> str Renders the specified template with the given context and returns the resulting HTML. send_json(data:dict) -> None Sends the specified data as a JSON response. send_file(file_path:str) -> None Sends the specified file as a response. Security sanitize_input(input:str) -> str Sanitizes the given input to prevent cross-site scripting (XSS) attacks. Escapes < and > to its corresponding HTML entity. hash_password(password:str,algorithm:str) -> str Hashes the given password for secure storage. A hashing algorithm can also be specified. Default is md5. verify_password(password:str, hash:str) -> bool Verifies the given password against the specified hash and returns a boolean indicating whether the verification was successful. Utilities generate_random_string(length:int) -> str Generates a random string of the specified length. A length must be specified get_current_time() -> datetime Returns the current date and time. sleep(seconds:float) -> None Pauses the execution of the program for the specified number of seconds. Logging and Debugging Logging(filepath:str) -> None Generates a logging constructor with a filepath to save the log data to. debug(message:str) -> None Logs a debug message to the server log. info(message:str) -> None Logs an informational message to the server log. warn(message:str) -> None Logs a warning message to the server log. error(message:str) -> None Logs an error message to the server log. File Storage upload_file(file:file, folder:str=None) -> str Uploads the specified file to the server and returns the URL where the file can be accessed. download_file(url:str) -> file Downloads the file from the specified URL and returns it as a file object. delete_file_from_server(url:str) -> None Deletes the file from the server at the specified URL. Email Handling send_email_with_attachment(to:str, subject:str, message:str, attachment:str) -> None Sends an email with the specified subject, message, and attachment to the specified recipient. send_email_template(to:str, template:str, context:dict) -> None Renders the specified email template with the given context and sends the resulting email to the specified recipient. Low level Access API Allows access to the underlying C API execute_c_function(function_name: str, args: List[Any]) -> Any Executes the specified C function with the given arguments and returns the result. function_name: The name of the C function to execute. args: A list of arguments to pass to the C function. Example: HTTP POST /execute-c-function Content-Type: application/json { \"function_name\": \"add_numbers\", \"args\": [1, 2, 3] } Response: { \"result\": 6 } create_socket(socket_type: str, port: int) -> str Creates a new socket of the specified type and port and returns a unique socket identifier. socket_type: The type of socket to create (e.g., \"TCP\", \"UDP\"). 8 port: The port number to use for the socket. Example: HTTP POST /create-socket Content-Type: application/json { \"socket_type\": \"TCP\", \"port\": 80 } Response: { \"socket_id\": \"1234\" } send_data(socket_id: int, data: bytes,flags: int) -> None Sends the specified data over the socket with the given identifier. socket_id: The identifier of the socket to use for sending data. data: The data to send, encoded as bytes. Example: HTTP POST /send-data Content-Type: application/json { \"socket_id\": 1234, \"data\": \"Hello, world!\".encode(\"utf-8\") } Response: HTTP 200 OK recv_data(socket_id: int, data: bytes, size: length, flags: int) -> None Recieves the specified data over the socket with the given identifier and stores it in a buffer. socket_id: The identifier of the socket to use for sending data. data: The data recieved, encoded as bytes. length: The length in bytes of the buffer. If the MSG_CONNTERM flag is set, the length of the buffer must be zero. flags: The flags parameter is set by specifying one or more of the following flags. Can be empty. If more than one flag is specified, the logical OR operator ( | ) must be used to separate them. The MSG_CONNTERM flag is mutually exclusive with other flags.","title":"API Documentation"},{"location":"apidocs/#http-request-handling","text":"get_request_args(paramname:str) -> string Returns the parameter provided from a GET request. post_request_args(paramname:str) -> string Returns the parameter provided from a POST request. request_get_query_string() -> str Returns the full query string of the current request. get_request_headers() -> dict Returns a dictionary containing all the request headers. get_request_post_data() -> dict Returns a dictionary containing all the POST data. get_request_file_upload(file_input_name:str) -> file Returns the file uploaded by the user for the specified file input name. getuseragent() -> string Gets the useragent string from an HTTP request get(url:str, params:dict=None, headers:dict=None) -> dict Sends an HTTP GET request to the specified URL with the specified query parameters and headers, and returns the response as a dictionary. post(url:str, data:dict=None, headers:dict=None) -> dict Sends an HTTP POST request to the specified URL with the specified data and headers, and returns the response as a dictionary.","title":"HTTP Request Handling"},{"location":"apidocs/#database-access","text":"connect_to_database() -> db_connection Returns a connection object to the configured database. execute_sql_query(query:str) -> query_result Executes the given SQL query and returns the result. execute_stored_procedure(proc_name:str, params:dict) -> proc_result Executes the specified stored procedure with the given parameters and returns the result. execute_safesql_query(query:str,parameter) -> query_result Executes the given SQL query and returns the result. Does automatic escaping","title":"Database Access"},{"location":"apidocs/#file-access","text":"read_file(file_path:str) -> str Reads the contents of the specified file and returns it as a string. write_file(content:str, filepath:str) -> None Writes the given content to the specified file. delete_file(file_path:str) -> None Deletes the specified file.","title":"File Access"},{"location":"apidocs/#common-functions","text":"redirect(url:str) -> None Redirects the user to the specified URL. set_cookie(cookie_name:str, cookie_value:str) -> None Sets a cookie with the given name and value. get_cookie(cookie_name:str) -> str Returns the value of the cookie with the given name. clear_cookie(cookie_name:str) -> None Clears the cookie with the given name. log(message:str) -> None Logs the given message to the server log. send_email(to:str, subject:str, message:str) -> None Sends an email to the specified recipient with the given subject and message.","title":"Common Functions"},{"location":"apidocs/#user-authentication","text":"login(username:str, password:str) -> bool Authenticates the user with the given username and password and returns a boolean indicating whether the authentication was successful. logout() -> None Logs out the current user. get_user_info() -> dict Returns a dictionary containing information about the currently logged in user.","title":"User Authentication"},{"location":"apidocs/#form-handling","text":"validate_form(form_data:dict, validation_rules:dict) -> dict Validates the given form data against the specified validation rules and returns a dictionary containing any validation errors. render_form(template:str, form_data:dict) -> str Renders the specified template with the given form data and returns the resulting HTML. submit_form(form_data:dict) -> None Submits the given form data to the server.","title":"Form Handling"},{"location":"apidocs/#response-handling","text":"render_template(template:str, context:dict) -> str Renders the specified template with the given context and returns the resulting HTML. send_json(data:dict) -> None Sends the specified data as a JSON response. send_file(file_path:str) -> None Sends the specified file as a response.","title":"Response Handling"},{"location":"apidocs/#security","text":"sanitize_input(input:str) -> str Sanitizes the given input to prevent cross-site scripting (XSS) attacks. Escapes < and > to its corresponding HTML entity. hash_password(password:str,algorithm:str) -> str Hashes the given password for secure storage. A hashing algorithm can also be specified. Default is md5. verify_password(password:str, hash:str) -> bool Verifies the given password against the specified hash and returns a boolean indicating whether the verification was successful.","title":"Security"},{"location":"apidocs/#utilities","text":"generate_random_string(length:int) -> str Generates a random string of the specified length. A length must be specified get_current_time() -> datetime Returns the current date and time. sleep(seconds:float) -> None Pauses the execution of the program for the specified number of seconds.","title":"Utilities"},{"location":"apidocs/#logging-and-debugging","text":"Logging(filepath:str) -> None Generates a logging constructor with a filepath to save the log data to. debug(message:str) -> None Logs a debug message to the server log. info(message:str) -> None Logs an informational message to the server log. warn(message:str) -> None Logs a warning message to the server log. error(message:str) -> None Logs an error message to the server log.","title":"Logging and Debugging"},{"location":"apidocs/#file-storage","text":"upload_file(file:file, folder:str=None) -> str Uploads the specified file to the server and returns the URL where the file can be accessed. download_file(url:str) -> file Downloads the file from the specified URL and returns it as a file object. delete_file_from_server(url:str) -> None Deletes the file from the server at the specified URL.","title":"File Storage"},{"location":"apidocs/#email-handling","text":"send_email_with_attachment(to:str, subject:str, message:str, attachment:str) -> None Sends an email with the specified subject, message, and attachment to the specified recipient. send_email_template(to:str, template:str, context:dict) -> None Renders the specified email template with the given context and sends the resulting email to the specified recipient.","title":"Email Handling"},{"location":"apidocs/#low-level-access-api","text":"Allows access to the underlying C API execute_c_function(function_name: str, args: List[Any]) -> Any Executes the specified C function with the given arguments and returns the result. function_name: The name of the C function to execute. args: A list of arguments to pass to the C function. Example: HTTP POST /execute-c-function Content-Type: application/json { \"function_name\": \"add_numbers\", \"args\": [1, 2, 3] } Response: { \"result\": 6 } create_socket(socket_type: str, port: int) -> str Creates a new socket of the specified type and port and returns a unique socket identifier. socket_type: The type of socket to create (e.g., \"TCP\", \"UDP\"). 8 port: The port number to use for the socket. Example: HTTP POST /create-socket Content-Type: application/json { \"socket_type\": \"TCP\", \"port\": 80 } Response: { \"socket_id\": \"1234\" } send_data(socket_id: int, data: bytes,flags: int) -> None Sends the specified data over the socket with the given identifier. socket_id: The identifier of the socket to use for sending data. data: The data to send, encoded as bytes. Example: HTTP POST /send-data Content-Type: application/json { \"socket_id\": 1234, \"data\": \"Hello, world!\".encode(\"utf-8\") } Response: HTTP 200 OK recv_data(socket_id: int, data: bytes, size: length, flags: int) -> None Recieves the specified data over the socket with the given identifier and stores it in a buffer. socket_id: The identifier of the socket to use for sending data. data: The data recieved, encoded as bytes. length: The length in bytes of the buffer. If the MSG_CONNTERM flag is set, the length of the buffer must be zero. flags: The flags parameter is set by specifying one or more of the following flags. Can be empty. If more than one flag is specified, the logical OR operator ( | ) must be used to separate them. The MSG_CONNTERM flag is mutually exclusive with other flags.","title":"Low level Access API"},{"location":"notes/","text":"Release Notes SnykWeb Release Notes - v2.0.0 Bug Fixes and Performance Optimizations In addition to the new features and improvements, SnykWeb includes various bug fixes and performance optimizations. These include: Fixed a bug where database connections were not properly closed after use Improved the performance of the file storage system for large files Fixed a bug where certain HTTP request headers were not being properly parsed A buffer overflow vulnerability exists in recv_data function, this has been mitigated by not using sprintf and using memcpy instead of strcpy Remove usage of strcopy to strncopy in create_socket Known Issues There are currently no known issues in this release. Upgrade Instructions To upgrade to SnykWeb v2.0.0, simply replace the existing framework files with the new version. Note that some changes may be required to your web application code to take advantage of the new features and improvements. Conclusion Any problems open a bug report SnykWeb Release Notes - v1.0.0 Overview This release of SnykWeb introduces several new features and improvements, including: * Support for user authentication and authorization * Enhanced file storage capabilities * Improved logging and error handling * Various bug fixes and performance optimizations New Features SnykWeb now includes built-in support for user authentication and authorization, allowing developers to easily secure their web applications. The framework includes a flexible and customizable authentication system, with support for various authentication methods such as username/password, social logins, and multi-factor authentication. SnykWeb's file storage capabilities have been enhanced to provide greater flexibility and ease of use. Developers can now upload and download files directly from the framework, with support for various file formats and sizes. The framework also includes a powerful file management system, allowing developers to easily organize and manage their files. SnykWeb's logging and error handling capabilities have been improved, with support for customizable log levels, error messages, and more. The framework includes built-in support for popular logging libraries such as Log4j and Logback, and can be easily configured to meet the needs of any web application. In addition to the new features and improvements, SnykWeb includes various bug fixes and performance optimizations. These include: Fixed a bug where database connections were not properly closed after use Improved the performance of the file storage system for large files Fixed a bug where certain HTTP request headers were not being properly parsed Known Issues There are currently no known issues in this release. Upgrade Instructions To upgrade to SnykWeb v1.0.0, simply replace the existing framework files with the new version. Note that some changes may be required to your web application code to take advantage of the new features and improvements. Conclusion We hope that this release of SnykWeb will provide developers with the tools and capabilities they need to build secure and scalable web applications. As always, we welcome feedback and suggestions for future releases, and encourage developers to contribute to the project on our GitHub page.ition where if an SnykWeb very large stack of routes, and all of those routes are sync (call next() synchronously), then the request processing may hang.","title":"Release Notes"},{"location":"notes/#release-notes","text":"","title":"Release Notes"},{"location":"notes/#snykweb-release-notes-v200","text":"","title":"SnykWeb Release Notes - v2.0.0"},{"location":"notes/#bug-fixes-and-performance-optimizations","text":"In addition to the new features and improvements, SnykWeb includes various bug fixes and performance optimizations. These include: Fixed a bug where database connections were not properly closed after use Improved the performance of the file storage system for large files Fixed a bug where certain HTTP request headers were not being properly parsed A buffer overflow vulnerability exists in recv_data function, this has been mitigated by not using sprintf and using memcpy instead of strcpy Remove usage of strcopy to strncopy in create_socket","title":"Bug Fixes and Performance Optimizations"},{"location":"notes/#known-issues","text":"There are currently no known issues in this release.","title":"Known Issues"},{"location":"notes/#upgrade-instructions","text":"To upgrade to SnykWeb v2.0.0, simply replace the existing framework files with the new version. Note that some changes may be required to your web application code to take advantage of the new features and improvements.","title":"Upgrade Instructions"},{"location":"notes/#conclusion","text":"Any problems open a bug report","title":"Conclusion"},{"location":"notes/#snykweb-release-notes-v100","text":"","title":"SnykWeb Release Notes - v1.0.0"},{"location":"notes/#overview","text":"This release of SnykWeb introduces several new features and improvements, including: * Support for user authentication and authorization * Enhanced file storage capabilities * Improved logging and error handling * Various bug fixes and performance optimizations","title":"Overview"},{"location":"notes/#new-features","text":"SnykWeb now includes built-in support for user authentication and authorization, allowing developers to easily secure their web applications. The framework includes a flexible and customizable authentication system, with support for various authentication methods such as username/password, social logins, and multi-factor authentication. SnykWeb's file storage capabilities have been enhanced to provide greater flexibility and ease of use. Developers can now upload and download files directly from the framework, with support for various file formats and sizes. The framework also includes a powerful file management system, allowing developers to easily organize and manage their files. SnykWeb's logging and error handling capabilities have been improved, with support for customizable log levels, error messages, and more. The framework includes built-in support for popular logging libraries such as Log4j and Logback, and can be easily configured to meet the needs of any web application. In addition to the new features and improvements, SnykWeb includes various bug fixes and performance optimizations. These include: Fixed a bug where database connections were not properly closed after use Improved the performance of the file storage system for large files Fixed a bug where certain HTTP request headers were not being properly parsed","title":"New Features"},{"location":"notes/#known-issues_1","text":"There are currently no known issues in this release.","title":"Known Issues"},{"location":"notes/#upgrade-instructions_1","text":"To upgrade to SnykWeb v1.0.0, simply replace the existing framework files with the new version. Note that some changes may be required to your web application code to take advantage of the new features and improvements.","title":"Upgrade Instructions"},{"location":"notes/#conclusion_1","text":"We hope that this release of SnykWeb will provide developers with the tools and capabilities they need to build secure and scalable web applications. As always, we welcome feedback and suggestions for future releases, and encourage developers to contribute to the project on our GitHub page.ition where if an SnykWeb very large stack of routes, and all of those routes are sync (call next() synchronously), then the request processing may hang.","title":"Conclusion"}]}